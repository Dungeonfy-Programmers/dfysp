Events:
	On Block Receive Game Event:
		ID: block_receive_game_event
		Description:
			Called when a block receives a Minecraft game event. As of now the only block that receives these are Skulk sensors.
			Requires MC 1.17+
		Examples:
			on block receive game event:
				set {_e} to event-entity
				if {_e} is a player:
					if event-block is set:
						damage {_e} by 0.5
		Since:
			1.14.0
		Patterns:
			[on] block receive game[ ]event [%-gameevent%]
		Event values:
			event-block
			event-entity
			event-location
			event-world
			event-gameevent
		Cancellable: true
	On Bound - Enter:
		ID: bound_-_enter
		Description:
			Called when a player enters a bound. Optional ID of bound. 'event-string' = bound ID.
		Examples:
			on bound enter:
				if event-bound = {bounds::spawn}:
					send "You entered spawn!"
			on enter bound with id "spawn":
				cancel event
		Since:
			1.0.0, 1.12.2 (Bound IDs)
		Patterns:
			[on] (bound enter|enter bound) [with id %-string%]
		Event values:
			event-player
			event-string
			event-bound
		Cancellable: true
	On Bound - Exit:
		ID: bound_-_exit
		Description:
			Called when a player exits a bound. Optional ID of bound. 'event-string' = bound ID.
		Examples:
			on bound exit:
				send "You left a bound"
				if event-bound = {bound}:
					send "You left Spawn!"
			on exit bound with id "spawn":
				cancel event
		Since:
			1.0.0, 1.12.2 (Bound IDs)
		Patterns:
			[on] (bound exit|exit bound) [with id %-string%]
		Event values:
			event-player
			event-string
			event-bound
		Cancellable: true
	On Generic Game Event:
		ID: generic_game_event
		Description:
			Called when a Minecraft game event is fired. These events are provided directly by Minecraft.
			NOTE: Cancelling this event will not cancel the action, only cancel broadcasting event to blocks.
			Requires MC 1.17+
		Examples:
			on game event splash:
				set {_e} to event-entity
				if {_e} is a player:
					push {_e} up with speed 0.5
		Since:
			1.14.0
		Patterns:
			[on] [generic] game[ ]event [%-gameevent%]
		Event values:
			event-entity
			event-location
			event-world
			event-gameevent
		Cancellable: true
	On Tab Complete:
		ID: tab_complete
		Description:
			Called when a player attempts to tab complete the arguments of a command. 
			event-string = the command.
		Since:
			1.7.0
		Patterns:
			[on] [skbee] tab complete [(of|for) %strings%]
		Event values:
			event-player
			event-string
		Cancellable: true
Conditions:
	Board - Is on:
		ID: CondBoardOn
		Description:
			Check if a player's scoreboard is currently toggled on or off.
		Examples:
			if scoreboard of player is on:
				toggle scoreboard of player off
			if scoreboard of player is off:
				toggle scoreboard of player on
		Since:
			1.0.0
		Patterns:
			[score]board of %player% is (on|true)
			[score]board of %player% is(n't| not) on
			[score]board of %player% is (off|false)
	Bound - Contains Location:
		ID: CondBoundContainsLocation
		Description:
			Check if a location is within the bounds of a bounding box.
		Since:
			1.0.0
		Patterns:
			%locations% (is|are) [with]in [bound] %bound%
			%locations% (isn't|is not|aren't|are not) [with]in [bound] %bound%
	EntityBlockStorage - Is Full:
		ID: CondEntityStorageBlockFull
		Description:
			Check if an entity storage block is fully of entities.
			As of 1.15 this only includes beehives/bee nests! Requires Spigot/Paper 1.15.2+
		Examples:
			if entity storage of block at player is full:
			if entity storage of target block is not full:
		Since:
			1.0.0
		Patterns:
			entity storage of %block% is full
			entity storage of %block% is(n't| not) full
	Is Minecraft Tagged:
		ID: CondIsMinecraftTagged
		Description:
			Check if an item is tagged with a Minecraft tag.
		Examples:
			if player's tool is tagged with minecraft tag "carpets":
			if target block is not tagged as minecraft tag "fence_gates"
			if clicked block is tagged as minecraft block tag "doors" or minecraft block tag "fence_gates"
		Since:
			1.10.0
		Patterns:
			%itemtypes% (is|are) tagged (with|as) %minecrafttags%
			%itemtypes% (isn't|is not|aren't|are not) tagged (with|as) %minecrafttags%
	Recipe - Has Discovered:
		ID: CondHasDiscoveredRecipe
		Description:
			Check if a player has discovered a recipe. Can check recipes you created, another plugin has created, or vanilla Minecraft recipes.When checking recipes that are not your own, make sure to include the namespace, ex "minecraft:diamond_sword", "someplugin:some_recipe". This condition is only available on 1.16+
		Examples:
			player has discovered recipe "minecraft:furnace"
			if player has discovered recipe "my_custom_sword":
			if player has discovered recipe "someplugin:fancy_shovel":
			if all players have not discovered recipe "minecraft:golden_shovel":
			if player has not discovered recipe "my_fancy_hoe":
		Since:
			1.4.9
		Patterns:
			%players% (has|have) discovered recipe[s] %strings%
			%players% (has|have) not discovered recipe[s] %strings%
Effects:
	Board - Clear:
		ID: EffBoardClear
		Description:
			Clear the scoreboard of a player.
		Examples:
			clear scoreboard of player
			clear scoreboards of all players
		Since:
			1.0.0
		Patterns:
			clear %players%'[s] [score]board[s]
			clear [score]board[s] of %players%
	Board - Line:
		ID: EffBoardLine
		Description:
			set/delete a line in a player's scoreboard. Note: line 1 is bottom, line 15 is top. Accepts texts and text components (text components as of 1.5.1).
		Since:
			1.0.0
		Patterns:
			set line %number% of %players%'[s] [score]board[s] to %basecomponent/string%
			set line %number% of [score]board[s] of %players% to %basecomponent/string%
			delete line %number% of %players%'[s] [score]board[s]
			delete line %number% of [score]board[s] of %players%
	Board - Title:
		ID: EffBoardTitle
		Description:
			Set the title of a player's scoreboard.
		Examples:
			set title of player's scoreboard to "MyServer"
			set title of all players' scoreboards to "Our Serberder!"
		Since:
			1.0.0
		Patterns:
			set title of %players%'[s] [score]board[s] to %string%
			set title of [score]board[s] of %players% to %string%
	Board - Toggle:
		ID: EffBoardToggle
		Description:
			Toggle the scoreboard of a player on or off.
		Since:
			1.0.0
		Patterns:
			toggle [score]board[s] of %players% [[to] ((on|true)|(off|false))]
			toggle %players%'[s] [score]board[s] [[to] ((on|true)|(off|false))]
	Bone Meal Effect:
		ID: EffBonemeal
		Description:
			Apply the bone meal effect to a block. Requires Minecraft 1.16.2+
		Examples:
			apply bonemeal effect to target block of player
		Since:
			1.7.0
		Patterns:
			apply bone[ ]meal [effect] to %blocks%
	Bound - Create/Remove:
		ID: EffBoundCreate
		Description:
			Create/Remove a bound with id between 2 locations. Optional value "full" is a bound from min to max height of world.
		Examples:
			create a new bound with id "%uuid of player%.home" between {loc1} and {loc2}
			create a full bound with id "spawn" between {loc} and location of player
			delete bound with id "my.home"
		Since:
			1.0.0
		Patterns:
			create [a] [new] [(full)] bound with id %string% (within|between) %location% and %location%
			(delete|remove) bound with id %string%
	EntityBlockStorage - Add/Release entities:
		ID: EffEntityBlockStorage
		Description:
			Add/release entities to/from blocks which can store entities.
			When releasing bees at night/during rain, they will immediately go back in their hive, use the optional timespan to keep them outside.
			You can optionally put the released entities into a variable (see examples).
			As of 1.15 this only includes beehives/bee nests! Requires Spigot/Paper 1.15.2+
		Examples:
			add last spawned bee to storage of target block of player
			release all entities from storage of target block of player
			release all entities from storage of event-block for 2 minutes
			release all entities from storage of target block of player for 1 minute into {_bees::*}
		Since:
			1.0.0
		Patterns:
			release [all] entities from [storage of] %blocks% [for %-timespan%] [into %-objects%]
			add %entities% to [storage of] %block%
	NBT - Save File:
		ID: EffSaveNBTFile
		Description:
			Manually save the NBT from a file. When getting the NBT compound from a file, changing values in the compound will
			not be automatically applied to the file, and saving will have to be done manually.
		Examples:
			set {_n} to nbt compound from file "plugins/maScript/some-data.nbt"
			set tag "ma-tag" of {_n} to 32
			save nbt file of {_n}
		Since:
			1.14.0
		Patterns:
			save nbt file[s] (for|of) %nbtcompounds%
	NBT - Set Block with NBT:
		ID: EffSetBlockNBT
		Description:
			Set a block at a location to a block with NBT. BlockData is also supported when using MC 1.13+ and Skript 2.5+
		Examples:
			set nbt-block at player to west facing furnace with nbt "{CustomName:""{\""text\"":\""&aFurnieFurnace\""}""}"
			set nbt-block at event-location to hopper with nbt "{CustomName:""{\""text\"":\""&cHoppieHopper\""}""}"
			set nbt-block at player to furnace[facing=west] with nbt "{CustomName:""{\""text\"":\""&aFurnieFurnace\""}""}"
		Since:
			1.0.0
		Patterns:
			set (nbt[(-| )]block|tile[(-| )]entity) %directions% %locations% to %itemtype/blockdata% with nbt %string/nbtcompound%
	NBT - Spawn Entity with NBT:
		ID: EffSpawnEntityNBT
		Description:
			Spawn an entity at a location with NBT
		Examples:
			spawn sheep at player with nbt "{NoAI:1b}"
			spawn 1 of zombie at player with nbt "{NoGravity:1b}"
		Since:
			1.0.0
		Patterns:
			spawn %entitytypes% [%directions% %locations%] with nbt %string/nbtcompound%
			spawn %number% of %entitytypes% [%directions% %locations%] with nbt %string/nbtcompound%
	Open Container Animation:
		ID: EffOpenContainerAnimation
		Description:
			Play the open/close animation on a lidded block (ie: chest, barrel or shulker box).
			Note: When using the open method, the block will basically be locked 'open', a player opening/closing the block will not close the lid.
			Requires Minecraft 1.16+
		Examples:
			play open animation on target block
			play close animation on all blocks in radius 3 around player
		Since:
			1.10.0
		Patterns:
			play (open|close) animation on %blocks%
	Particle Spawn:
		ID: EffParticle
		Description:
			Spawn a particle. This system is more inline with how Bukkit deals with particles, hence the amount of patterns.
			DO NOT USE '(spawn|play)' part of syntax, they're horribly slow at parsing and will be removed in the future, use '(lerp|draw|make)' instead.
			Some particles may be affected differently by these values, so let's break them down:
			
first number = count, how many particles to spawn at once.
			
particle = the particle to spawn.
			
using = the data used for this particle (some particles like 'block', 'item' and 'dust' require more data).
			
location = where you are going to spawn the particle.
			
offset = a vector with the maximum random offset. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.
			I believe some particles use the offset to set color. I'm not positive on this.
			
extra = the extra data for this particle, depends on the particle used (normally speed).
			
Requires Minecraft 1.13+
		Examples:
			make 3 of item particle using diamond at location of player
			make 1 of block particle using dirt at location of target block
			make 10 of poof at player with offset vector(2, 2, 2) with extra 0.5
			draw 20 of dust using dustOption(blue, 10) at location above target block
			draw 1 of dust_color_transition using dustTransition(blue, green, 3) at location of player
			draw 1 of vibration using vibration({loc1}, {loc2}, 1 second) at {loc1}
		Since:
			1.9.0
		Patterns:
			(spawn|play|lerp|draw|make) %number% [of] %particle% [particle] [using %-itemtype/blockdata/dustoption/dusttransition/vibration%] %directions% %locations% [(with offset|offset by) %-vector%] [with extra %-number%] [(for|to) %-players%]
	Recipe - Cooking:
		ID: EffCookingRecipe
		Description:
			Register new cooking recipes. On 1.13+ you can register recipes for furnaces. 
			On 1.14+ you can also register recipes for smokers, blast furnaces and campfires. 
			The ID will be the name given to this recipe. IDs may only contain letters, numbers, periods, hyphens and underscores. Used for recipe discovery/unlocking recipes for players. You may also include an optional group for recipes. These will group the recipes together in the recipe book.
			By default recipes will start with the namespace "skrecipe:", this can be changed in the config to whatever you want.
		Examples:
			on skript load:
				register new furnace recipe for diamond using dirt with id "furnace_diamond"
				register new blasting recipe for emerald using dirt with id "blasting_emerald"
				register new smoking recipe for cooked cod named "Hot Cod" using puffer fish with id "smoking_cod"
		Since:
			1.0.0
		Patterns:
			register [new] (furnace|(blast furnace|blasting)|smok(er|ing)|campfire) recipe for %itemtype% (using|with ingredient) %itemtype/materialchoice% with id %string% [[and ]with exp[erience] %-number%] [[and ]with cook[ ]time %-timespan%] [in group %-string%]
	Recipe - Discovery:
		ID: EffRecipeDiscovery
		Description:
			Lock/Unlock recipes for players. This uses the IDs we created earlier when registering recipes, you can also lock/unlock minecraft recipes. Requires MC 1.13+
		Examples:
			unlock recipe "smoking_cod" for all players
			on pickup of diamonds:
				discover recipe "fancy_diamonds" for player
		Since:
			1.0.0
		Patterns:
			(discover|unlock) [(custom|(mc|minecraft))] recipe[s] [with id[s]] %strings% for %players%
			(undiscover|lock) [(custom|(mc|minecraft))] recipe[s] [with id[s]] %strings% for %players%
	Recipe - Knowledge Book:
		ID: EffKnowledgeBook
		Description:
			Add/Remove custom or minecraft recipes to/from a knowledge book item.
			Optional string for plugin name, to add recipes from other plugins. Requires MC 1.13+
		Examples:
			add custom recipe "my_recipe" to player's tool
			add minecraft recipe "cooked_cod_from_campfire_cooking" to {_book}
		Since:
			1.0.0
		Patterns:
			add [(custom|(mc|minecraft))] recipe[s] [with id[s]] %strings% [from plugin %-string%] to %itemtype%
			remove [(custom|(mc|minecraft))] recipe[s] [with id[s]] %strings% [from plugin %-string%] from %itemtype%
	Recipe - Remove:
		ID: EffRemoveRecipe
		Description:
			Remove a recipe from your server. Recipes can be removed at any time 
			but it is best to do so during a server load event. If a recipe is removed whilst a player is online 
			it will still show up in their recipe book, but they will not be able to craft it. If need be, you can get 
			a list of all recipes by simply typing "/minecraft:recipe give YourName " in game.
			You can remove Minecraft recipes, custom recipes and recipes from other plugins. Requires MC 1.13+
		Examples:
			remove mc recipe "acacia_boat"
			remove minecraft recipe "cooked_chicken_from_campfire_cooking"
			remove recipe "minecraft:diamond_sword"
			remove all minecraft recipes
			remove custom recipe "my_recipe"
			remove recipe "another_recipe"
			remove recipe "someplugin:some_recipe"
		Since:
			1.0.0
		Patterns:
			remove [(custom|(mc|minecraft))] recipe[s] %strings%
			remove all (mc|minecraft) recipe[s]
	Recipe - Shaped/Shapeless:
		ID: EffCraftingRecipe
		Description:
			Register a new shaped/shapeless recipe for a specific item using custom ingredients.
			Recipes support items and material choices for ingredients. Material choices allow you to use Minecraft tags or lists of items.
			The ID will be the name given to this recipe. IDs may only contain letters, numbers, periods, hyphens and underscores.
			IDs are used for recipe discovery/unlocking recipes for players.
			You may also include an optional group for recipes. These will group the recipes together in the recipe book.
			NOTE: Recipes with 4 or less ingredients will be craftable in the player's crafting grid.
			By default recipes will start with the namespace "skrecipe:", this can be changed in the SkBee config to whatever you want.
			Requires MC 1.13+
		Since:
			1.0.0
		Patterns:
			register [new] (shaped|shapeless) recipe for %itemtype% (using|with ingredients) %itemtypes/materialchoices% with id %string% [in group %-string%]
	Recipe - Smithing:
		ID: EffSmithingRecipe
		Description:
			Register a new smithing recipe.
			The ID will be the name given to this recipe. IDs may only contain letters, numbers, periods, hyphens and underscores.
			Used for recipe discovery/unlocking recipes for players.
			Note: While 'custom' items will work in these recipes, it appears the smithing table will not recognize them. Requires MC 1.16+
		Examples:
			on load:
				register new smithing recipe for diamond chestplate using an iron chestplate and a diamond with id "smith_diamond_chestplate"
		Since:
			1.4.2
		Patterns:
			register [new] smithing recipe for %itemtype% using %itemtype/materialchoice% and %itemtype/materialchoice% with id %string%
	Recipe - StoneCutting:
		ID: EffStonecuttingRecipe
		Description:
			Register a new stone cutting recipe. The ID will be the name given to this recipe. IDs may only contain letters, numbers, periods, hyphens and underscores.
			Used for recipe discovery/unlocking recipes for players. 
			You may also include an optional group for recipes. These will group the recipes together in the recipe book.
			By default recipes will start with the namespace "skrecipe:", this can be changed in the config to whatever you want.
			Requires MC 1.13+
		Examples:
			on skript load:
				register new stone cutting recipe for diamond using diamond ore with id "cutting_diamond"
		Since:
			1.0.0
		Patterns:
			register [new] stone[ ]cutt(ing|er) recipe for %itemtype% (using|with ingredient) %itemtype/materialchoice% with id %string% [in group %-string%]
	Structure - Fill:
		ID: EffStructureFill
		Description:
			Fill a structure with blocks. Requires MC 1.17.1+
		Examples:
			fill structure {_s} between {loc1} and {loc2}
			fill structure {_s} between location at player and location(10,10,10, world "world")
		Since:
			1.12.0
		Patterns:
			fill [structure] %structure% between %location% and %location%
	Structure - Place:
		ID: EffStructurePlace
		Description:
			Place an already created structure into the world. Requires MC 1.17.1+
		Examples:
			place structure {_s} at location above target block of player
		Since:
			1.12.0
		Patterns:
			place [structure] %structure% at %location%
	Structure - Save/Delete:
		ID: EffStructureSave
		Description:
			Save a structure to file (will overwrite if already in that file), or delete a structure file. Requires MC 1.17.1+
		Examples:
			save structure {_s}
			save structures {_s::*}
			delete structure {_s}
		Since:
			1.12.0
		Patterns:
			(save|delete) [structure[s]] %structures%
	Structure Block - Load:
		ID: EffLoadStructure
		Description:
			Load structure block structures that are saved on your server
			Optional values for rotation, mirroring and the inclusion of entities.
			Requires Minecraft 1.9.4+. No longer available on MC 1.18+, please use new structure system.
		Examples:
			load "house" at location of player
			load "barn" at location 10 infront of player
			paste "house" at location of player with rotation 90 and with mirror left to right
			load "sheep_pen" at location below player with rotation 180 and with entities
		Since:
			1.0.0
		Patterns:
			(load|paste) [structure] %string% at %location% [with rotation (0|90|180|270)] [(|[and] with entities)]
			(load|paste) [structure] %string% at %location% [with rotation (0|90|180|270)] [and] [with] mirror front to back [(|[and] with entities)]
			(load|paste) [structure] %string% at %location% [with rotation (0|90|180|270)] [and] [with] mirror left to right [(|[and] with entities)]
	Structure Block - Save:
		ID: EffSaveStructure
		Description:
			Save structure block structures.
			Requires Minecraft 1.9.4+. No longer available on MC 1.18+, please use new structure system.
		Examples:
			save structure between {loc1} and {loc2} as "house"
		Since:
			1.0.0
		Patterns:
			save [structure] between %location% and %location% as %string%
	TextComponent - Send:
		ID: EffSendComponent
		Description:
			Send text components to players (or console, not sure which server version this started on). 
			The optional sender (supported in Minecraft 1.16.4+) allows you to send components from a specific player.
			This is useful to make sure players can block messages using 1.16.4's new player chat ignore system.
		Examples:
			set {_comp::1} to text component of "hi player "
			set {_comp::2} to text component of "hover over me for a special message!"
			set hover event of {_comp::2} to hover event to show "OoO look ma I'm hovering!"
			send component {_comp::*} to player
		Since:
			1.5.0
		Patterns:
			send [text] component[s] %basecomponents% [to %commandsenders%] [from %-player%]
	VirtualFurnace - Furnace Fuel:
		ID: EffFurnaceFuel
		Description:
			Register recipes for fuels for virtual furnaces. Burn time will determine how long this fuel will burn for.Alternatively you can use the all vanilla fuel effect, and it will register all fuels that match vanilla fuels.Due to a limitation in Minecraft, this only accepts items which can be used as fuels in vanilla furnaces.
		Examples:
			on load:
				register furnace fuel coal with burn time 8 minutes
			on load:
				register all vanilla fuels
		Since:
			1.3.0
		Patterns:
			register furnace fuel %itemtype% with burn time %timespan%
			register all vanilla [furnace] fuels
	VirtualFurnace - Furnace Recipe:
		ID: EffFurnaceRecipe
		Description:
			Register recipes for virtual furnaces. Alternatively you can just register all vanilla-like recipes foryour virtual furnaces. 
		Examples:
			on load:
				register virtual furnace recipe for cooked chicken using raw chicken with cooktime 15 seconds
			on load:
				register all virtual furnace recipes
		Since:
			1.3.0
		Patterns:
			register virtual furnace recipe for %itemtype% using %itemtype% [with cooktime %-timespan%]
			register all virtual (furnace|smoker|blast furnace) recipes
Expressions:
	Anvil Rename Text:
		ID: ExprAnvilRenameText
		Description:
			Represents the text the player enters into an anvil. This can not be set.
		Examples:
			on anvil prepare:
				if slot 0 of event-inventory is raw chicken:
					if slot 1 of event-inventory is an enchanted book:
						if stored enchants of slot 1 of event-inventory contains sharpness 5:
							set {_i} to cooked chicken
							set name of {_i} to colored anvil rename text of event-inventory
							enchant {_i} with sharpness 6
							set event-slot to {_i}
							set repair cost of event-inventory to 30
		Return type: Text
		Changers:
			none
		Patterns:
			[the] [anvil] (rename text|repair name) of %inventories%
			%inventories%'[s] [anvil] (rename text|repair name)
	Anvil Repair Cost:
		ID: ExprAnvilRepairCost
		Description:
			Represents the anvil inventory's repair cost and maximum repair cost.
			Repair cost = the experience cost (in levels) to complete the current repair.
			Maximum repair cost = the maximum experience cost (in levels) to be allowed by the current repair.
			If the result of 'repair cost' exceeds the returned value, the repair result will be air to due being "too expensive".
			By default, this level is set to 40. Players in creative mode ignore the maximum repair cost.
			NOTE: the 'max repair cost' seems to be a little finicky, it may or may not work as intended (this is out of my control).
		Examples:
			on anvil prepare:
				if slot 0 of event-inventory is a diamond sword:
					if slot 1 of event-inventory is an enchanted book:
						if stored enchants of slot 1 of event-inventory contains sharpness 5:
							set {_i} to slot 0 of event-inventory
							add "&aOOOOOOO" and "&bAHHHHHH" to lore of {_i}
							enchant {_i} with sharpness 6
							set event-slot to {_i}
							set repair cost of event-inventory to 30
		Since:
			1.11.0
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[the] [anvil] (repair cost|max[imum] repair cost) of %inventories%
			%inventories%'[s] [anvil] (repair cost|max[imum] repair cost)
	Armor Change Event - Item:
		ID: ExprArmorChange
		Description:
			Get the old/new item in an armor change event. Defaults to new. When using set, it will set the slot that was changed, old/new will make no difference in this case. Requires Paper 1.12.2+
		Examples:
			on player armor change:
				if new armor item is any helmet:
					set armor item to a diamond helmet
		Since:
			1.3.1
		Return type: Item Type
		Changers:
			set
		Patterns:
			[(new|old)] armor item
	Block Data - Block:
		ID: ExprBlockDataBlock
		Description:
			Get block data from a block. You can get a string of block data, all the tags in a block data or a specific tag. 
			You can also set a block data for a block or set a specific tag for block data. This syntax is only available for MC 1.13+ 
			Skript 2.5 added a new block data system that differs slightly from SkBee. That said, when using that version of Skript 
			the only available syntax here will be 'block data tags', 'block data tag "tag here"' and 'block data without updates', 
			these will not be optional.
		Examples:
			set {_data} to block data of target block of player
			set {_data::*} to block data tags of target block of player
			set {_water} to block data tag "waterlogged" of event-block
			set block data of target block to "minecraft:carrots[age=7]"
			set block data tag "waterlogged" of event-block to true
		Since:
			1.0.0
		Return type: Object
		Changers:
			set
		Patterns:
			[the] block[ ](data|state) (tags|tag %-string%|without update[s]) of %blocks%
			%blocks%'[s] block[ ](data|state) (tags|tag %-string%|without update[s])
	Block Data - Item:
		ID: ExprBlockDataItem
		Description:
			Get block data from an item. You can get a string of block data, all the tags in a block data or a specific tag. 
			You can also set a block data for an item or set a specific tag for block data. This syntax is only available for MC 1.14+
		Examples:
			set item data of player's tool to block data of target block
			set item data of player's tool to "minecraft:campfire[lit=false,waterlogged=true]"
			set item data tag "lit" of player's tool to false
		Since:
			1.0.0
		Return type: Object
		Changers:
			set
		Patterns:
			[the] item [block[ ]](data|state) [(tags|tag %-string%)] of %itemtypes%
			%itemtypes%'[s] item [block[ ]](data|state) [(tags|tag %-string%)]
	Block in Chunk:
		ID: ExprBlockInChunk
		Description:
			Represents a block in a chunk. X/Z coords will be a value from 0 to 15.
		Examples:
			set block at 1,1,1 in chunk at player to stone
			set {_b} to block at 8,64,8 in chunk at player
		Since:
			1.13.0
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			block at %number%,[ ]%number%,[ ]%number% (in|of) %chunk%
	BlockState - BlockData:
		ID: ExprBlockStateBlockData
		Description:
			Represents the blockdata of a block in a structure. Requires MC 1.17.1+
		Examples:
			set {_data} to blockdata of blockstate {_blockstate}
		Since:
			1.12.3
		Return type: Block Data
		Changers:
			none
		Patterns:
			block[ ]data of [blockstate[s]] %blockstates%
	BlockState - ItemType:
		ID: ExprBlockStateItemType
		Description:
			Represents the itemtype of a block in a structure. Requires MC 1.17.1+
		Examples:
			set {_type} to itemtype of blockstate {_blockstate}
		Since:
			1.12.3
		Return type: Item Type
		Changers:
			none
		Patterns:
			[item[ ]]type of [blockstate[s]] %blockstates%
	BlockState - Offset:
		ID: ExprBlockStateOffset
		Description:
			Represents the offset of a block in a structure. This is a vector, distance from the starting block of a structure.
			Requires MC 1.17.1+
		Examples:
			set {_offset} to offset of blockstate {_blockstate}
		Since:
			1.12.3
		Return type: Vector
		Changers:
			none
		Patterns:
			offset of [blockstate[s]] %blockstates%
	Book Pages:
		ID: ExprBookPages
		Description:
			Allows you to set pages in a book to text components. You can also retrieve the pages. Based on testing, a book's author/title needs to be set AFTER setting the pages, why? I have no idea!
		Examples:
			set {_i} to a written book
			set {_a} to text component of "RULES"
			set hover event of {_a} to hover event showing "make sure to read our rules"
			set click event of {_a} to click event to run command "/rules"
			set page 1 of {_i} to {_a}
			set book author of {_i} to "Bob"
			set book title of {_i} to "MyBook"
			give player 1 of {_i}
		Since:
			1.8.0
		Return type: Text Component - Base Component
		Changers:
			set
		Patterns:
			page %number% of [book] %itemtype%
	Bound - At Location:
		ID: ExprBoundAtLocation
		Description:
			Get a list of bounds/ids at a location.
		Examples:
			set {_bounds::*} to bounds at player
			set {_b::*} to bound ids at player
			loop all bounds at player:
		Since:
			1.0.0
		Return type: Object
		Changers:
			none
		Patterns:
			[(all [[of] the]|the)] bound[s] at %location%
			[(all [[of] the]|the)] bound id[s] at %location%
	Bound - Blocks:
		ID: ExprBoundBlocks
		Description:
			All the blocks within a bound
		Examples:
			set {_blocks::*} to all blocks within bound {bound}
			set all blocks within {bound} to stone
			loop all blocks within bound {bound}:
				if loop-block is stone:
					set loop-block to grass
		Since:
			1.0.0
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[(all [[of] the]|the)] blocks within [bound] %bound%
	Bound - Coords:
		ID: ExprBoundCoords
		Description:
			The coords and world of a bounding box. You can get the world/coords for a specific bound, you can also set the coords of a bounding box. You can NOT set the world of a bounding box. 
			
Lesser will always equal the lower south-east corner. 
			Greater will always equal the higher north-west corner.
		Examples:
			set lesser y coord of {bound} to 10
			set {_x} to greater x coord of bound with id "my.bound"
		Since:
			1.0.0
		Return type: Object
		Changers:
			add
			set
			remove
		Patterns:
			lesser (x|y|z) coord[inate] of [bound] %bound%
			greater (x|y|z) coord[inate] of [bound] %bound%
			world of bound %bound%
	Bound - From ID:
		ID: ExprBoundFromID
		Description:
			Get a bound object from a bound ID
		Examples:
			set {_b} to bound from id "%player%.home"
		Since:
			1.0.0
		Return type: Bound
		Changers:
			none
		Patterns:
			bound (of|from|with) id %string%
	Chunk Coordinates:
		ID: ExprChunkCoords
		Description:
			Represents the coordinates of a chunk.
		Examples:
			set {_x} to chunk x of chunk at player
		Since:
			1.13.0
		Return type: Number
		Changers:
			none
		Patterns:
			chunk (x|z) of %chunk%
	Entity NoClip:
		ID: ExprNoClip
		Description:
			Set or get the noClip status of an entity (This will not work on players)
		Examples:
			spawn a zombie at player
			set no clip state of last spawned zombie to true
			set {_var} to no clip state of last spawned sheep
			loop all entities in radius 5 around player:
				set no clip state of loop-entity to true
				push loop-entity up with speed 5
		Since:
			1.0.2
		Return type: Boolean
		Changers:
			set
		Patterns:
			no[( |-)]clip (state|mode) of %entities%
			%entities%'s no[( |-)]clip (state|mode)
	Entity Visibility:
		ID: ExprEntityVisibility
		Description:
			Get/set visibility for entities. Armor stands on all versions, ItemFrames on 1.15+ and LivingEntities on 1.16.3+
		Examples:
			set visibility of target entity to false
			set {_v} to visibility of target entity
			if visibility of target entity is true:
		Since:
			1.7.0
		Return type: Boolean
		Changers:
			set
		Patterns:
			[the] visibility of %entities%
			%entities%'[s] visibility
	EntityBlockStorage - Entity Count:
		ID: ExprEntityBlockStorageCount
		Description:
			Get the amount of entities currently stored in a storage block.
			As of 1.15 this only includes beehives/bee nests! Requires Spigot/Paper 1.15.2+
		Examples:
			if amount of stored entities in block at player > 10:
			set {_a} to size of entities stored in event-block
		Since:
			1.0.0
		Return type: long
		Changers:
			none
		Patterns:
			(size|amount) of [all] (stored entities|entities stored) in %blocks%
	EntityBlockStorage - Max Entities:
		ID: ExprEntityBlockStorageMax
		Description:
			Get/Set the max amount of entities which can be stored in a block.
			As of 1.15 this only includes beehives/bee nests! Requires Spigot/Paper 1.15.2+
		Examples:
			set {_m} to max entities of target block of player
			set max entities of target block of player to 20
			set max entity storage of event-block to 5
		Since:
			1.0.0
		Return type: long
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] max entit(ies|y storage) of %blocks%
			%blocks%'[s] max entit(ies|y storage)
	Game Event - Radius:
		ID: ExprGameEventRadius
		Description:
			Get/set the radius a game event will broadcast. Requires MC 1.17+
		Examples:
			on game event:
				set game event radius to 20
		Since:
			1.14.0
		Return type: Number
		Changers:
			add
			set
			remove
			delete
		Patterns:
			game[ ]event radius
	Hidden Item Flags:
		ID: ExprHiddenFlags
		Description:
			Hides the item flags on items, allowing you to make super duper custom items. Dye item flag added in 1.5.0 and only available on 1.16.2+.
		Examples:
			set player's tool to player's tool with attribute flag hidden
			give player 1 diamond sword of sharpness 5 with hidden enchants flag
			set {_tool} to player's tool with all flags hidden
			give player potion of harming with hidden potion effects flag
			set {_b} to leather boots with dye flag hidden
		Since:
			1.0.0
		Return type: Item Type
		Changers:
			none
		Patterns:
			%itemtype% with (all|enchant[s]|destroy[s]|potion[ ]effect[s]|unbreakable|attribute[s]|dye) flag[s] hidden
			%itemtype% with hidden (all|enchant[s]|destroy[s]|potion[ ]effect[s]|unbreakable|attribute[s]|dye) flag[s]
	Inventory Name:
		ID: ExprInvName
		Description:
			This is a temp placeholder for Skript's inventory name expression, which is broken in 1.14+
		Examples:
			if inventory name of current inventory of player = "Settings":
		Since:
			1.0.0
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (custom|inv[entory]) name of %inventories%
			%inventories%'[s] (custom|inv[entory]) name
	Knockback Attacker/Victim:
		ID: ExprKnockbackAttackerVictim
		Description:
			The attacker/victim in an entity knockback event. Paper 1.12.2+
		Examples:
			on entity knockback:
				if knockback attacker is a player:
					if knockback victim is a sheep:
						cancel event
		Since:
			1.8.0
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[the] knockback (attacker|victim)
	Loaded Chunks:
		ID: ExprLoadedChunks
		Description:
			Represents all currently loaded chunks in a world.
		Examples:
			loop loaded chunks of world of player:
			set {_chunks} to loaded chunks of world "world"
		Since:
			1.13.0
		Return type: Chunk
		Changers:
			none
		Patterns:
			[(all [[of] the]|the)] loaded chunks of %world%
	Material Choice:
		ID: ExprMaterialChoice
		Description:
			A material choice is a list of items or a minecraft tag, that can be used as an option in some recipes.
			When using the 'every' item type, this will grab all relatable items in a list, ie: 'every sword'.
			This allows you to have one specific slot of a recipe to accept multiple items, without having to create multiple recipes.
			Do note that material choices do not accept custom items (ie: items with names, lore, enchants, etc). Requires Minecraft 1.13+
		Examples:
			set {_a} to material choice of diamond sword, diamond shovel and diamond hoe
			set {_a} to material choice of every sword
			set {_a} to material choice of minecraft tag "doors"
		Since:
			1.10.0
		Return type: Material Choice
		Changers:
			none
		Patterns:
			material choice of %itemtypes%
			material choice of %minecrafttag%
	Minecraft Tag:
		ID: ExprMinecraftTag
		Description:
			Represents a Minecraft tag. This includes all vanilla item/block tags registered to the server.
			Bukkit provides 2 lists, item tags and block tags. Some tags might be in both lists but still have the same effect.
			If you are unsure of all tag options, just return a list of all tags to see what is available.
			You can also get a list of all itemtypes that are tagged by a tag.
			The 'minecraft:' namespace is optional. Requires Minecraft 1.13+
		Since:
			1.10.0
		Return type: Object
		Changers:
			none
		Patterns:
			minecraft [(item|block)] tag[s] %strings%
			[all] minecraft [(item|block)] tags
			[all] item[type]s of minecraft [(item|block)] tag[s] %strings%
	NBT - Compound of:
		ID: ExprNbtCompound
		Description:
			Get the nbt compound of a block/entity/item/file. This is a more advanced version of NBT than just getting an NBT string 
			which allows for better manipulation. Optionally you can return a copy of the compound. This way you can modify it without 
			actually modifying the original compound, for example when grabbing the compound from an entity, modifying it and applying to 
			other entities. NBT from items will not be the original, but will be a copy. NBT from a file will need to be saved manually using 
			the NBT - Save File effect. If the file does not yet exist, a new file will be created.
		Examples:
			set {_n} to nbt compound of player's tool
			set {_nbt} to nbt compound of target entity
			set {_n} to nbt compound of "{id:""minecraft:diamond_sword"",tag:{Damage:0,Enchantments:[{id:""minecraft:sharpness"",lvl:3s}]},Count:1b}"
			set {_nbt} to nbt compound of file "world/playerdata/some-uuid.dat"
		Since:
			1.6.0
		Return type: NBT - Compound
		Changers:
			add
		Patterns:
			nbt compound [(copy)] (of|from) %blocks/entities/itemtypes/itemstacks/slots/strings%
			nbt compound [(copy)] (of|from) file[s] %strings%
	NBT - Item from NBT:
		ID: ExprItemFromNBT
		Description:
			This expression allows you to grab an item from NBT strings or compounds (compound support added in 1.6.0). 
			This can be useful when wanting to grab items from file nbt, or nbt of an entity or an inventory holding block (like a chest or furnace).
			It can also be useful for creating your own serializing system. The NBT string required for this must be an item's FULL item NBT 
			(This must include the item type and amount, example of full: "{id:"minecraft:iron_sword",tag:{Damage:0},Count:1b}"
			 example of partial nbt of the same item: "{Damage:0}").
		Examples:
			set {_i} to item from nbt "{id:""minecraft:iron_sword"",tag:{Damage:0},Count:1b}"
			

			set {_nbt::*} to tag "Inventory" of file nbt of "world/playerdata/some-players-uuid.dat"
			loop {_nbt::*}
				set {_i} to item from nbt loop-value
		Since:
			1.4.10
		Return type: Item Type
		Changers:
			none
		Patterns:
			item[s] (from|of) nbt[s] %strings/nbtcompounds%
			nbt item[s] (from|of) %strings/nbtcompounds%
	NBT - Item with NBT:
		ID: ExprItemWithNBT
		Description:
			Give players items with NBT or even use items with NBT in GUIs
		Examples:
			give player diamond sword with nbt "{Unbreakable:1}"
			format gui slot 1 of player with diamond axe with nbt "{Enchantments:[{id:\"\"unbreaking\"\",lvl:5s}]}"
		Since:
			1.0.0
		Return type: Item Type
		Changers:
			none
		Patterns:
			%itemtype% with [item( |-)]nbt %string/nbtcompound%
	NBT - Item/Inventory Slot/Entity/Block/File:
		ID: ExprObjectNBT
		Description:
			NBT of items, inventory slots, entities, tile entities (such as a furnace, hopper, brewing stand, banner, etc) or files. 
			Supports get, set, add and reset. Reset will only properly work on an item, not entities or blocks. 
			Set should not be used on entities or blocks, it's best to use add. Using set can quite often screw up the entity/block's location. 
			The optional 'full' part (added in 1.4.10) will only work on items/slots. When using this, it will return the full NBT of said item, 
			including the item amount as well as the item type.
		Examples:
			set {_nbt} to nbt of player's tool
			set {_f} to full nbt of player's tool
			add "{Enchantments:[{id:""sharpness"",lvl:5}]}" to nbt of player's tool
			reset nbt of player's tool
			set {_nbt} to nbt of target entity
			set {_nbt} to event-entity
			add "{CustomName:""{\""text\"":\""&bMyNewName\""}""}" to nbt of target entity
			add "{RequiredPlayerRange:0s}" to targeted block's nbt
			add "{SpawnData:{id:""minecraft:wither""}}" to nbt of clicked block
			set {_nbt} to file-nbt of "world/playerdata/some-uuid-here.dat"
		Since:
			1.0.0
		Return type: Object
		Changers:
			add
			set
			reset
		Patterns:
			[the] [(full )][(entity|item|slot|block|tile[(-| )]entity|file)(-| )]nbt of %block/entity/itemstack/itemtype/slot/string%
			%block/entity/itemstack/itemtype/slot/string%'[s] [(full )][(entity|item|slot|block|tile[(-| )]entity|file)(-| )]nbt
	NBT - Pretty NBT String:
		ID: ExprPrettyNBT
		Description:
			Get a 'pretty' NBT string. This is colored the same as when using the vanilla Minecraft '/data' command. 
			Splitting it will output kind of like a JSON output. Requires 1.13.2+
		Examples:
			set {_p} to pretty nbt from nbt compound of player's tool
			send pretty nbt from {_nbt} to player
			send pretty nbt from {_nbt} with split " " to console
		Since:
			1.6.0
		Return type: Text
		Changers:
			none
		Patterns:
			pretty nbt (of|from) %nbtcompounds/strings% [(with|using) split %-string%]
			%nbtcompounds/strings%'[s] pretty nbt [(with|using) split %-string%]
	NBT - Tag:
		ID: ExprTagOfNBT
		Description:
			Returns the value of the specified tag of the specified NBT. Also supports getting nested tags using a semi colon as a delimiter.
			If the return value is a list, you can use it as a list, as it will automatically split it for ya.
			As of 1.6.0 you can also set/delete tags, but only with NBT compounds, not NBT strings. Do note that setting the tag of an item
			will not update it, you will have to create a variable for the NBT compound of the item, set the tag of that variable, then set the item back
			using the 'nbt item of' expression. I understand this is a bit convoluted but unfortunately that is just how it works. See examples.
			Also note that you can NOT create custom tags for entities/blocks. As of 1.7.1 blocks(tile entities)/entities will be able to hold custom nbt
			data in the "custom" tag of said block/entity. Due to Minecraft not supporting this, I had to use some hacky methods to make this happen.
			That said, this system is a tad convoluted, see the SkBee WIKI for more details.
			As of 1.10.0 you can now add custom NBT to any block (the same as you would for tile entities)(This is only support on 1.16.4+). 
			Since Minecraft does not natively support this, the NBT is actually stored in the chunk's NBT. See wiki for more info.
			As of 1.10.0 you can get/set specific tag types of NBT compounds, allowing for more detailed control of what type your tag is going to be.
		Since:
			1.0.0
		Return type: Object
		Changers:
			set
			delete
		Patterns:
			tag %string% of %string/nbtcompound%
			%string% tag of %string/nbtcompound%
			%nbttype% %string% of %nbtcompound%
			%string% %nbttype% of %nbtcompound%
	NBT - Tag Type:
		ID: ExprTagTypeOfNBT
		Description:
			Represents the NBT tag type of a tag in an NBT compound. This is mainly useful for debugging purposes.
		Examples:
			set {_type} to tag type of tag "Pos" of nbt compound of player
		Since:
			1.13.1
		Return type: NBT - Tag Type
		Changers:
			none
		Patterns:
			[nbt[ ]]tag[ ]type of tag %string% of %nbtcompound%
	NBT - Tags:
		ID: ExprTagsOfNBT
		Description:
			Get all tags of an NBT compound.
		Examples:
			set {_t::*} to nbt tags of {_n}
			set {_t::*} to nbt tags of nbt compound of player
		Since:
			INSERT VERSION
		Return type: Text
		Changers:
			none
		Patterns:
			[the] nbt tags of %nbtcompound%
			%nbtcompound%'[s] nbt tags
	NBT - UUID for NBT:
		ID: ExprNBTUuid
		Description:
			Allows you to get an entity's UUID which can be represented in an NBT compound. Prior to 1.16 UUIDs were represented 
			as most/least significant bits. As of 1.16, they are now represented as int arrays. If the player/entity is excluded, this 
			will return a random UUID.
		Examples:
			set {_u::*} to uuid int array of player
			set {_u} to uuid int array as string from player
			set {_m} to uuid most from target entity
			set {_l} to uuid least bits of event-entity
		Since:
			1.5.2
		Return type: Object
		Changers:
			none
		Patterns:
			uuid (int array[( as string)]|most[ bits]|least[ bits]) [(from|of) %-offlineplayer/entity%]
	Pathfinding - Path Points:
		ID: ExprPath
		Description:
			Get all the points along an entity's pathfinding path. Requires Paper 1.13+
		Examples:
			set {_path::*} to path points of last spawned sheep
		Since:
			1.5.0
		Return type: Location
		Changers:
			none
		Patterns:
			path [points] of %livingentities%
	Pathfinding - Path Target:
		ID: ExprPathTarget
		Description:
			Set the path of an entity to target a specific location, with an optional speed
			Get the location of the paths end. Delete will stop the entity from pathfinding. Requires Paper 1.13+
		Examples:
			set path target of event-entity to player
			set path target with speed 1.5 to location of above player
			set path targets of all entities to location of player
			delete path target of event-entity
		Since:
			1.5.0
		Return type: Location
		Changers:
			set
			delete
		Patterns:
			[the] [final] path target[s] [with speed %-number%] of %livingentities%
			%livingentities%'[s] [final] path target[s] [with speed %-number%]
	Recipe - All Recipes:
		ID: ExprAllRecipes
		Description:
			Get a list of all recipes. May be from a specific item, may be just Minecraft recipes or custom recipes.
			Due to some items having more than 1 recipe this may return multiple recipes. Requires 1.13+
		Examples:
			set {_recipes::*} to all recipes of iron ingot
		Since:
			1.4.0
		Return type: Text
		Changers:
			none
		Patterns:
			[(all [[of] the]|the)] [((mc|minecraft)|custom)] recipe[s] [(for|of) %-itemtypes%]
	Recipe - Ingredients of Recipe:
		ID: ExprIngredientsOfRecipe
		Description:
			Get the ingredients from a recipe. Requires 1.13+
		Examples:
			set {_ing::*} to ingredients of recipe "minecraft:diamond_sword"
			loop recipes for iron ingot:
				set {_ing::*} to ingredients of recipe %loop-value%
		Since:
			1.4.0
		Return type: Item Type
		Changers:
			none
		Patterns:
			[(all [[of] the]|the)] ingredients (for|of) recipe %string%
	Stored Enchantments:
		ID: ExprStoredEnchant
		Description:
			Get/set the stored enchantments of an enchanted book.
		Examples:
			set {_a::*} to stored enchants of player's tool
			set stored enchants of player's tool to sharpness 3 and unbreaking 2
			add sharpness 1 to stored enchants of player's tool
			delete stored enchants of player's tool
			remove sharpness from stored enchants of player's tool
		Since:
			1.0.0
		Return type: Enchantment Type
		Changers:
			add
			set
			remove
			delete
		Patterns:
			[the] stored enchant[ment]s of %itemstacks/itemtypes%
			%itemstacks/itemtypes%'[s] stored enchant[ment]s
	Structure - BlockStates:
		ID: ExprStructureBlockStates
		Description:
			Get a list of the blockstates in a structure. This represents the palette of blocks a structure holds.
			Requires MC 1.17.1+
		Examples:
			set {_list::*} to blockstates of structure {_structure}
		Since:
			1.12.3
		Return type: BlockState
		Changers:
			none
		Patterns:
			blockstates of [structure] %structure%
	Structure - Object:
		ID: ExprStructureObject
		Description:
			Create a new, empty structure or load a structure from file. 
			If the file you have specified is not available, it will be created upon saving.
			Structures without a namespace (ex: "tree") will load from/save to "(main world folder)/generated/minecraft/structures/".
			Structures with a namespace (ex:"myname:house") will load from/save to "(main world folder)/generated/myname/structures/".
			To create folders, simply add a slash in your name, ex: "buildings/house".
			Requires MC 1.17.1+
		Examples:
			set {_s} to structure named "my-server:houses/house1"
			set {_s} to structure named "my-house"
			set {_s::*} to structures named "house1" and "house2"
		Since:
			1.12.0
		Return type: Structure
		Changers:
			none
		Patterns:
			structure[s] named %strings%
	Structure - Properties:
		ID: ExprStructureProperties
		Description:
			Represents different properties of a structure, including mirroring, rotation, inclusion of entities and integrity.
			These properties are only used for placing the structure in a world, they are NOT saved to the structure file.
			Mirror determines which way the structure mirrors, either 'none', 'front back' or 'left right'.
			Rotation determines which way the structure is rotated, either 'none', 'clockwise 90', 'clockwise 180' or 'counterclockwise 90'.
			Integrity determines how damaged the building should look by randomly skipping blocks to place. This value can range from 0 to 1.
			With 0 removing all blocks and 1 spawning the structure in pristine condition.
			Include entities determines if saved entities should be spawned into the structure (true by default).
			Size returns a vector offset from the starting point of the structure. This cannot be changed.
			Requires MC 1.17.1+
		Examples:
			set rotation of {_s} to clockwise 90
			set {_r} to rotation of {_s}
			set {_v} to size of {_s}
			set include entities of structure {_s} to false
			set integrity of structure {_s} to 0.75
		Since:
			1.12.0
		Return type: Object
		Changers:
			set
		Patterns:
			mirror of [structure] %structures%
			rotation of [structure] %structures%
			integrity of [structure] %structures%
			include entities of [structure] %structures%
			size of [structure] %structures%
	Tab Completion Argument:
		ID: ExprTabCompletionArgs
		Description:
			Get the argument or a list of all arguments in a tab complete event.
		Since:
			1.7.0
		Return type: Text
		Changers:
			none
		Patterns:
			tab [complete] arg[ument](s|[(-| )]%number%)
	Tab Completions:
		ID: ExprTabCompletion
		Description:
			Set the tab completions used in a tab complete event. 
			You can specify which position in the command arguments also (will default to position 1). 
			You can also remove texts from tab completions.
		Since:
			1.7.0
		Return type: Text
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[skbee] tab completions [(of|for) position %number%]
	Text Component - Click Event:
		ID: ExprClickEvent
		Description:
			Create a new click event. Supports run command, suggest command, open link and copy to clipboard.
		Examples:
			set {_t} to text component from "Check out my cool website"
			set hover event of {_t} to a new hover event showing "Clicky clicky to go to spawn!"
			set click event of {_t} to a new click event to open url "https://my.cool.website"
			send component {_t} to player
		Since:
			1.5.0
		Return type: Object
		Changers:
			none
		Patterns:
			[a] [new] click event to run command %string%
			[a] [new] click event to suggest command %string%
			[a] [new] click event to open (link|url) %string%
			[a] [new] click event to copy %string% to clipboard
			[a] [new] click event to change to page %number%
	Text Component - Click Event Of:
		ID: ExprClickEventOf
		Description:
			Set the click event of a text component.
		Examples:
			set {_t} to text component from "Check out this cool thing at SPAWN!"
			set hover event of {_t} to a new hover event showing "Clicky clicky to go to spawn!"
			set click event of {_t} to a new click event to run command "/spawn"
			send component {_t} to player
		Since:
			1.5.0
		Return type: Object
		Changers:
			none
		Patterns:
			[the] click event of %basecomponents%
			%basecomponents%'[s] click event
	Text Component - Format:
		ID: ExprComponentFormat
		Description:
			Change formatting options of text components. Most of these are pretty straight forward. Insertion means the text 
			that will copy to chat when a player shift-clicks the component (Might not be available on all versions). Color supports color 
			names as well as RGB color codes via Skript's RGB function (RGB = Minecraft 1.16+) (see examples).
		Examples:
			set {_t} to text component from "my fancy text component"
			set bold format of {_t} to true
			set color format of {_t} to aqua
			set color format of {_t} to rgb(100, 0, 160)
			set insertion format of {_t} to "ooooo"
		Since:
			1.5.1
		Return type: Object
		Changers:
			set
		Patterns:
			[the] (color|bold|italic|(obfuscate[d]|magic)|strikethrough|underline[d]|insert[ion]) format of %basecomponents%
			%basecomponents%'[s] (color|bold|italic|(obfuscate[d]|magic)|strikethrough|underline[d]|insert[ion]) format
	Text Component - Hover Event:
		ID: ExprHoverEvent
		Description:
			Create a new hover event. Can show text or an item to a player. 'showing %itemtype%' requires Minecraft 1.16.2+
		Examples:
			set {_t} to text component from "Check out my cool tool!"
			set hover event of {_t} to a new hover event showing player's tool
			send component {_t} to player
		Since:
			1.5.0
		Return type: Object
		Changers:
			none
		Patterns:
			[a] [new] hover event showing %strings%
			[a] [new] hover event showing %itemtype%
	Text Component - Hover Event Of:
		ID: ExprHoverEventOf
		Description:
			Set the hover event of a text component.
		Examples:
			set {_t} to text component from "Check out my cool tool!"
			set hover event of {_t} to a new hover event showing player's tool
			send component {_t} to player
		Since:
			1.5.0
		Return type: Object
		Changers:
			none
		Patterns:
			[the] hover event of %basecomponents%
			%basecomponents%'[s] hover event
	Text Component - New Text Component:
		ID: ExprTextComponent
		Description:
			Create a new text component. Can have hover and click events added to it. You can also create a translate component, 
			this will send to the client, and the client will translate based on their language. You can use either an item type or a 
			translate string, you can find these in your Minecraft jar 'assets/minecraft/lang/<lang file>.json'.
			Some components have extra objects, you can use strings or other text components here.
		Since:
			1.5.0
		Return type: Text Component - Base Component
		Changers:
			none
		Patterns:
			[a] [new] text component[s] (from|of) %strings%
			[a] [new] translate component[s] (from|of) %itemtypes/strings%
			[a] [new] translate component[s] (from|of) %string% (with|using) %objects%
	Total Experience:
		ID: ExprTotalXP
		Description:
			Represents the total experience points the player currently has.
		Examples:
			add 10 to total experience of player
			remove 100 from total experience of player
			set total xp of player to 1500
			set {_t} to total experience of player
		Since:
			1.2.0
		Return type: integer
		Changers:
			add
			set
			remove
		Patterns:
			[the] total (xp|experience) [points] of %players%
			%players%'[s] total (xp|experience) [points]
	VirtualFurnace - Furnace Item:
		ID: ExprVirtualFurnaceItem
		Description:
			Get a virtual furnace item. This will be any item with a linked virtual furnace, allowing players to access a portable furnace wherever they go. The speed multipliers will allow your furnace item to cook faster or burn fuel faster. Ex: 1.0 will burn at normal speed as defined by the recipes, where as 2.0 will burn twice as fast. Omitting these values will default to 1.0.GUI name will be the name that shows up in the furnace GUI
		Examples:
			give player a virtual furnace item as diamond named "MyFurnace" with gui name "PORTABLE FURNACE" with cook speed multiplier 1.5
		Since:
			1.3.0
		Return type: Item Type
		Changers:
			none
		Patterns:
			[a] [(glowing)] virtual furnace item as %itemtype% with (inventory|gui) name %string% [[and ]with cook speed multiplier %number%] [[and ]with fuel speed multiplier %number%]
Types:
	Bound:
		ID: Bound
		Description:
			Represents a 3D bounding box between 2 points
		Since:
			1.0.0
		Patterns:
			bound
	Game Event:
		ID: GameEvent
		Description:
			Represents a Minecraft 'GameEvent', mainly used by Skulk Sensors. Requires MC 1.17+.
			See McWiki for more details -> https://minecraft.fandom.com/wiki/Sculk_Sensor#Vibration_amplitudes
		Usage: block_attach, block_change, block_close, block_destroy, block_detach, block_open, block_place, block_press, block_switch, block_unpress, block_unswitch, container_close, container_open, dispense_fail, drinking_finish, eat, elytra_free_fall, entity_damaged, entity_killed, entity_place, equip, explode, fishing_rod_cast, fishing_rod_reel_in, flap, fluid_pickup, fluid_place, hit_ground, lightning_strike, minecart_moving, mob_interact, piston_contract, piston_extend, prime_fuse, projectile_land, projectile_shoot, ravager_roar, ring_bell, shear, shulker_close, shulker_open, splash, step, swim, wolf_shaking
		Since:
			1.14.0
		Patterns:
			game[ ]event[s]
	Material Choice:
		ID: MaterialChoice
		Description:
			Represents a set of materials/minecraft tags which can be used in some recipes. 
			Requires Minecraft 1.13+
		Examples:
			set {_a} to material choice of diamond sword, diamond shovel and diamond hoe
			set {_a} to material choice of every sword
			set {_a} to material choice of minecraft tag "doors"
		Usage: see material choice expression
		Since:
			1.10.0
		Patterns:
			material choice[s]
	Minecraft Tag:
		ID: Tag
		Description:
			Represents a tag provided by Minecraft. Requires Minecraft 1.13+
		Usage: see Minecraft tag expression
		Since:
			1.10.0
		Patterns:
			[minecraft ]tag[s]
	NBT - Compound:
		ID: NBTCompound
		Description:
			Represents the NBT compound of an entity/block/item.
		Examples:
			set {_a} to nbt compound of player
		Usage: {id:"minecraft:netherite_axe",tag:{Damage:0,Enchantments:[{id:"minecraft:unbreaking",lvl:2s}]},Count:1b}
		Since:
			1.6.0
		Patterns:
			nbt[ ]compound
	NBT - Tag Type:
		ID: NBTCustomType
		Description:
			Represents a type of NBT tag.
		Examples:
			set byte tag "points" of {_nbt} to 1
			set compound tag "tool" of {_nbt} to nbt compound of player's tool
		Usage: byte array tag, byte tag, compound list tag, compound tag, double list tag, double tag, float list tag, float tag, int array tag, int list tag, int tag, long list tag, long tag, short tag, string list tag, string tag
		Since:
			1.10.0
		Patterns:
			nbt[ ]type[s]
	Particle:
		ID: Particle
		Description:
			Represents a particle which can be used in the 'Particle Spawn' effect.
			Some particles require extra data, these are distinguished by their data type within the square brackets.
			DustOption, DustTransition and Vibration each have their own functions to build the appropriate data for these particles.
		Examples:
			play 1 of soul at location of player
			play 10 of dust using dustOption(green, 10) at location of player
			play 3 of item using player's tool at location of player
			play 1 of block using dirt at location of player
			play 1 of dust_color_transition using dustTransition(blue, green, 3) at location of player
			play 1 of vibration using vibration({loc1}, {loc2}, 1 second) at {loc1}
		Usage: ambient_entity_effect, angry_villager, ash, barrier, block [blockdata/itemtype], bubble, bubble_column_up, bubble_pop, campfire_cosy_smoke, campfire_signal_smoke, cloud, composter, crimson_spore, crit, current_down, damage_indicator, dolphin, dragon_breath, dripping_dripstone_lava, dripping_dripstone_water, dripping_honey, dripping_lava, dripping_obsidian_tear, dripping_water, dust [dust-option], dust_color_transition [dust-transition], effect, elder_guardian, electric_spark, enchant, enchanted_hit, end_rod, entity_effect, explosion, explosion_emitter, falling_dripstone_lava, falling_dripstone_water, falling_dust [blockdata/itemtype], falling_honey, falling_lava, falling_nectar, falling_obsidian_tear, falling_spore_blossom, falling_water, firework, fishing, flame, flash, glow, glow_squid_ink, happy_villager, heart, instant_effect, item [itemtype], item_slime, item_snowball, landing_honey, landing_lava, landing_obsidian_tear, large_smoke, lava, light, mycelium, nautilus, note, poof, portal, rain, reverse_portal, scrape, small_flame, smoke, sneeze, snowflake, soul, soul_fire_flame, spit, splash, spore_blossom_air, squid_ink, sweep_attack, totem_of_undying, underwater, vibration [vibration], warped_spore, wax_off, wax_on, white_ash, witch
		Since:
			1.9.0
		Patterns:
			particle[s]
	Structure:
		ID: StructureBee
		Description:
			Represents a structure that can be saved or pasted into a world. Requires MC 1.17.1+
			Use the 'Structure-Object' expression to get a new/existing structure object.
		Since:
			1.12.0
		Patterns:
			structure[s]
	Structure - Mirror:
		ID: Mirror
		Description:
			Represents the different states of mirroring for a structure. Requires MC 1.17.1+
		Examples:
			set mirror of structure {_s} to front back
		Usage: front back, left right, none
		Since:
			1.12.0
		Patterns:
			mirror[s]
	Structure - Rotation:
		ID: StructureRotation
		Description:
			Represents the different states of rotation for a structure. Requires MC 1.17.1+
		Examples:
			set rotation of structure {_s} to clockwise 90
		Usage: clockwise 180, clockwise 90, counterclockwise 90, none
		Since:
			1.12.0
		Patterns:
			structure[ ]rotation[s]
	Text Component - Base Component:
		ID: BaseComponent
		Description:
			Text components used for hover/click events. Due to the complexity of these, 
			they can NOT be long term stored in variables.
		Examples:
			set {_t} to text component from "CLICK FOR OUR DISCORD"
			set hover event of {_t} to a new hover event showing "Clicky Clicky!"
			set click event of {_t} to a new click event to open url "https://OurDiscord.com"
			send component {_t} to player
		Since:
			1.5.0
		Patterns:
			base[ ]component[s]
Functions:
	dustOption:
		Description:
			Creates a new dust option to be used with 'dust' particle. Color can either be a regular color or an RGB color using
			Skript's rgb() function. Size is the size the particle will be.
		Examples:
			set {_c} to dustOption(red, 1.5)
			set {_c} to dustOption(rgb(1, 255, 1), 3)
		Since:
			1.9.0
		Return type: dustoption
		Patterns:
			dustOption(color: color, size: number)
	dustTransition:
		Description:
			Creates a new dust transition to be used with 'dust_color_transition' particle.
			Color can either be a regular color or an RGB color using Skript's rgb() function.
			Size is the size the particle will be. Requires MC 1.17+
		Examples:
			set {_d} to dustTransition(red, green, 10)
			set {_d} to dustTransition(blue, rgb(1,1,1), 5)
		Since:
			1.11.1
		Return type: dusttransition
		Patterns:
			dustTransition(fromcolor: color, tocolor: color, size: number)
	vibration:
		Description:
			Creates a new vibration to be used with 'vibration' particle.
			FROM = the origin location the particle will start at.
			TO = the destination location the particle will travel to.
			ARRIVAL TIME = the time it will take to arrive at the destination location. Requires MC 1.17+
		Examples:
			set {_v} to vibration({loc1}, {loc2}, 10 seconds)
		Since:
			1.11.1
		Return type: vibration
		Patterns:
			vibration(from: location, to: location, arrivaltime: timespan)